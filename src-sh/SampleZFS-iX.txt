create_partitions()
{
    local _disk="$1"

    # Create BIOS boot partition
    if ! sgdisk -a1 -n1:24K:+1000K -t1:EF02 /dev/${_disk}; then
            return 1
    fi
    # Create EFI partition (Even if not used, allows user to switch to UEFI later)
    if ! sgdisk -n2:1M:+512M -t2:EF00 /dev/${_disk}; then
	    return 1
    fi
    # Create boot pool
    if ! sgdisk -n3:0:0 -t3:BF01 /dev/${_disk}; then
	    return 1
    fi

    return 0
}

partition_disks()
{
    local _disks _disksparts
    local _mirror
    local _minsize
    local _size

    # Create and destroy existing pool (if exists)
    zpool import -N -f freenas-boot || true
    zpool destroy -f freenas-boot || true

    _disks=$*

    # Erase both typical metadata area.
    for _disk in ${_disks}; do
	sgdisk -Z ${_disk} >/dev/null 2>&1 || true
	sgdisk -Z ${_disk} >/dev/null 2>&1 || true
	#dd if=/dev/zero of=/dev/${_disk} bs=1M count=2 >/dev/null
	#_size=$(diskinfo ${_disk} | cut -f 3)
	#dd if=/dev/zero of=/dev/${_disk} bs=1M oseek=$((_size / MiB - 2)) >/dev/null || true
    done

    #_minsize=$(get_minimum_size ${_disks})

    #if [ ${_minsize} -lt ${MIN_ZFS_PARTITION_SIZE} ]; then
    #	echo "Disk is too small to install ${AVATAR_PROJECT}" 1>&2
    #	return 1
    #fi

    _disksparts=$(for _disk in ${_disks}; do
	create_partitions ${_disk} >&2
	echo /dev/${_disk}3
    done)

    if [ $# -gt 1 ]; then
	_mirror="mirror"
    else
	_mirror=""
    fi
    zpool create -f -o cachefile=/tmp/zpool.cache -o ashift=12 -d \
		-o feature@async_destroy=enabled \
		-o feature@bookmarks=enabled \
		-o feature@embedded_data=enabled \
		-o feature@empty_bpobj=enabled \
		-o feature@enabled_txg=enabled \
		-o feature@extensible_dataset=enabled \
		-o feature@filesystem_limits=enabled \
		-o feature@hole_birth=enabled \
		-o feature@large_blocks=enabled \
		-o feature@lz4_compress=enabled \
		-o feature@spacemap_histogram=enabled \
		-o feature@userobj_accounting=enabled \
		-O acltype=posixacl -O canmount=off -O compression=lz4 -O devices=off -O mountpoint=none \
		-O normalization=formD -O relatime=on -O xattr=sa \
		freenas-boot ${_mirror} ${_disksparts}
    zfs set compression=on freenas-boot
    zfs create -o canmount=off freenas-boot/ROOT
    zfs create -o mountpoint=legacy freenas-boot/ROOT/${BENAME}

    return 0
}

install_loader()
{
    local _disk _disks
    local _mnt

    _mnt="$1"
    shift
    _disks="$*"

    # Tell GRUB we are booting from ZFS
    echo 'GRUB_CMDLINE_LINUX="root=ZFS=freenas-boot/ROOT/default"' >> ${_mnt}/etc/default/grub
    mkdir -p ${_mnt}/boot/efi

    # May not be needed on Void??
    chroot ${_mnt} update-initramfs -c -k $(uname -r) -v

    chroot ${_mnt} update-grub

    for _disk in $_disks
    do
	    echo "Stamping GPT loader on: /dev/${_disk}"
	    chroot ${_mnt} grub-install /dev/${_disk}

	    echo "Stamping EFI loader on: ${_disk}"
	    chroot ${_mnt} mkdosfs -F 32 -s 1 -n EFI /dev/${_disk}2
	    chroot ${_mnt} mount -t vfat /dev/${_disk}2 /boot/efi
	    chroot ${_mnt} grub-install --target=x86_64-efi \
		    --efi-directory=/boot/efi \
		    --bootloader-id=debian --recheck --no-floppy
	    chroot ${_mnt} umount /boot/efi
    done

    return 0
}
